{
  "hash": "edc0236a964c26bcd0362b24e705037f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: SQL, Visualization, R, and Python\ndate: '2018-11-03'\ndraft: true\n---\n\n\n\nNot long ago, I saw a thread in my tweeter feed that was talking about what should be the first thing that a data scientist student learns. There were two answers that made sense to me: SQL and visualization. \n\nSQL, because, one needs to be able to get desired data from somewhere, and for the most part in an industry setting at least, that somewhere is typically some form of databases (e.g., relational database, hive, etc.), which can be accessed by SQL-like languages. As far as basics go, I think being able to select data (with conditions) and create/drop table should carry one surprisingly a long way in a data science journey.\n\nVisualizaton, because, one needs to be able to show acquired data and analyses done on them in some kind of non-text form, and that non-text form typically involves graphs. As far as basics go, I think being able to show data on a bar chart and a line chart should carry one surprisingly a long way in a data science journey.\n\nAbout the same time, I started using Python a bit more at work, and with the twitter thread fresh in mind, I thought this might be a good time to write a post that compares how to do frequently used plotting in both R and Python. By frequently used plotting, I mean bar charts and line charts based on personal experience. I've been using bar chart usually for frequency of categorical variables and line chart for sequence of numerical variables.  \n\n\nIn this post, I'll try to provide as minimal codes as possible to draw two flavors in each: simple chart and grouped chart. \n\n    - Bar plot for frequency of categorical variable\n    - line plot for sequence of numerical variable\n\nR vs. Python\n    - Similarities\n    - Differences\n    \n\n\n\n\n\n\n# Setup\n## Load libraries\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load libraries for R\n\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(uncmbb)) # dataset\n```\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n# Load libraries for Python\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n```\n:::\n\n\n\n## Read data\n\n### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no need to add uncmbb::, but to clarify where object 'unc' is coming from\nunc_r <- uncmbb::unc \nprint(head(unc_r))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Season  Game_Date Game_Day Type Where   Opponent_School Result Tm Opp   OT\n1   1950 1949-12-01      Thu  REG     H              Elon      W 57  39 <NA>\n2   1950 1949-12-03      Sat  REG     A          Richmond      W 58  50 <NA>\n3   1950 1949-12-05      Mon  REG     A     Virginia Tech      L 48  62 <NA>\n4   1950 1949-12-07      Wed  REG     A      Lenoir-Rhyne      L 78  79   OT\n5   1950 1949-12-09      Fri  REG     H George Washington      L 44  54 <NA>\n6   1950 1949-12-28      Wed  REG     N     West Virginia      L 50  58 <NA>\n```\n\n\n:::\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# read R data object (from UNCMBB package) in Python\nunc_py = r.unc\nprint(unc_py.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Season   Game_Date Game_Day Type  ... Result    Tm   Opp    OT\n0   1950  1949-12-01      Thu  REG  ...      W  57.0  39.0  None\n1   1950  1949-12-03      Sat  REG  ...      W  58.0  50.0  None\n2   1950  1949-12-05      Mon  REG  ...      L  48.0  62.0  None\n3   1950  1949-12-07      Wed  REG  ...      L  78.0  79.0    OT\n4   1950  1949-12-09      Fri  REG  ...      L  44.0  54.0  None\n\n[5 rows x 10 columns]\n```\n\n\n:::\n:::\n\n\n\n\n# Bar chart\n\n## Simple frequency\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Option 1: no pre summarizing\nunc_r %>% ggplot(aes(x = Type)) +\n          geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# Option 2: summarize data before plotting\nunc_r %>% group_by(Type) %>%\n          summarize(n = n()) %>% # see ?dplyr::count\n          ggplot(aes(x = Type, y = n)) +\n          geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=1152}\n:::\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Option 1: no pre summarizing\nunc_py['Type'].value_counts().plot(kind = 'bar')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=1152}\n:::\n\n```{.python .cell-code}\n# Option 2: summarize data before plotting\nunc_py.groupby('Type').size().plot(kind = 'bar')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=1152}\n:::\n:::\n\n\n\n## Grouped frequency\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunc_r %>% group_by(Type, Result) %>%\n          summarize(n = n()) %>%\n          ggplot(aes(x = Type, y = n)) +\n          geom_bar(stat = \"identity\", position = \"dodge\", aes(fill = factor(Result)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Type'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-5.png){width=1152}\n:::\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nt = unc_py.groupby(['Type', 'Result']).size().reset_index(name = 'games').pivot(index = 'Type', columns = 'Result', values = 'games').reset_index()\nt.plot(kind = 'bar', x = 'Type')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=1152}\n:::\n:::\n\n\n\n\n# Line chart\n## Simple sequence\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Option 1: use join (to divide # of wins by # of games)\nt <- unc_r %>% count(Season)\nunc_r %>% group_by(Season, Result) %>%\n            summarize(games = n()) %>%\n            inner_join(t, by = \"Season\") %>%\n            filter(Result == \"W\") %>%\n            mutate(perc = round(games/n, 4)) %>%\n            ggplot(aes(x = Season, y = perc)) + \n            geom_line(aes(group = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-3.png){width=1152}\n:::\n\n```{.r .cell-code}\n# Option 2: using jutilr::add_percent\nunc_r %>% group_by(Season, Result) %>%\n            summarize(games = n()) %>%\n            jutilr::add_percent(var = \"games\") %>% \n            filter(Result == \"W\") %>%\n            ggplot(aes(x = Season, y = perc)) + \n            geom_line(aes(group = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `mutate_()` was deprecated in dplyr 0.7.0.\nℹ Please use `mutate()` instead.\nℹ See vignette('programming') for more help\nℹ The deprecated feature was likely used in the jutilr package.\n  Please report the issue to the authors.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-4.png){width=1152}\n:::\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Option 1: use join (to divide # of wins by # of games per season)\n\nt = unc_py.Season.value_counts().reset_index(name = \"total\")\nt2 = unc_py.groupby(['Season', 'Result']).size().reset_index(name = 'games')\nt3 = pd.merge(t, t2, left_on = 'Season', right_on = 'Season').sort_values('Season')\nt3['perc'] = t3.games/t3.total\nt3.loc[t3.Result == 'W', ['Season', 'perc']].plot(kind = 'line', x = 'Season', y = 'perc')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\n\n\n## Grouped sequence \n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunc_r %>% group_by(Season, Result) %>%\n            summarize(games = n()) %>%\n            ggplot(aes(x = Season, y = games)) + \n            geom_line(aes(group = Result, colour = Result))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-3.png){width=1152}\n:::\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nt = unc_py.groupby(['Season', 'Result']).size().reset_index(name = 'games').pivot(index = 'Season', columns = 'Result', values = 'games').reset_index()\nt.plot(kind = 'line', x = 'Season')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}