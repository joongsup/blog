{
  "hash": "c053f3f8c0579e4fef069efc80faa882",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Categorical variable treatment\ndate: '2018-03-24'\ndraft: true\n---\n\n\n\nIn reviewing details of random forest, I came upon several concepts that I thought were both interesting and important enough to be highlighted in a separate post. Mainly for my own reference, but if it helps others, that'd be great too!\n\n## Various categorical variable encoding methods and related concepts\n- Reference cell coding (dummy encoding/one-hot encoding)\n    - How categorical variables are treated (by default?) in regressions in R\n    - Appreciating R's way of doing things (behind the scence)\n    - Turns out same thing as dummy coding!\n    - Default method in caret (seems for both character and factor variables)\n        \n- Label encoding (integer encoding)\n    - Replace each level with a numeric value\n\n- Links\n    - [Categorical features and encoding in decision trees](https://medium.com/data-design/visiting-categorical-features-and-encoding-in-decision-trees-53400fa65931)\n    - [Is one-hot encoding bad?]([http://roamanalytics.com/2016/10/28/are-categorical-variables-getting-lost-in-your-random-forests/]\n)\n    - [Interpreting linear model output](https://stats.stackexchange.com/questions/21282/regression-based-for-example-on-days-of-week#21292)\n    - [UCLA](https://stats.idre.ucla.edu/r/modules/coding-for-categorical-variables-in-regression-models/)\n    - [SE](https://stats.stackexchange.com/questions/70699/qualitative-variable-coding-in-regression-leads-to-singularities/70708?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)\n    - [SE](https://stats.stackexchange.com/questions/120030/interpretation-of-betas-when-there-are-multiple-categorical-variables?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)\n        \n   \n\n## When to use label encoding vs. dummy encoding\n- Correlation plot\n    - Winner: dummy encoding, because unless the categorical variable is ordinal, labeled value doesn't mean anything. \n- Regression\n    - Winner: dummy encoding, because of the same reason as above.\n- Tree-based models\n    - Winner: label encoding, because \n        - Variable importance interpretation\n        - Grid search for best mtry (in k-fold cv) might result in different result for mtry\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nheaders <- c(\"age\", \"workclass\", \"fnlwgt\", \"education\", \"education_num\", \"marital_status\", \"occupation\", \"relationship\", \"race\", \"sex\", \"capital_gain\", \"capital_loss\", \"hours_per_week\",  \"native_country\", \"response\")\nadult <- read_csv(\"http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data\", col_names = headers)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 32561 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): workclass, education, marital_status, occupation, relationship, rac...\ndbl (6): age, fnlwgt, education_num, capital_gain, capital_loss, hours_per_week\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n#head(adult)\n\nvars <- c(\"age\", \"education\", \"response\")\ndf <- adult[, vars]\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n    age education response\n  <dbl> <chr>     <chr>   \n1    39 Bachelors <=50K   \n2    50 Bachelors <=50K   \n3    38 HS-grad   <=50K   \n4    53 11th      <=50K   \n5    28 Bachelors <=50K   \n6    37 Masters   <=50K   \n```\n\n\n:::\n\n```{.r .cell-code}\ndf %>% group_by(education, response) %>% summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'education'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 3\n# Groups:   education [16]\n   education response     n\n   <chr>     <chr>    <int>\n 1 10th      <=50K      871\n 2 10th      >50K        62\n 3 11th      <=50K     1115\n 4 11th      >50K        60\n 5 12th      <=50K      400\n 6 12th      >50K        33\n 7 1st-4th   <=50K      162\n 8 1st-4th   >50K         6\n 9 5th-6th   <=50K      317\n10 5th-6th   >50K        16\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}